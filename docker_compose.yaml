version: '3'
services:

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    networks:
      project:
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      - start-dev

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks:
      project:
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    networks:
      project:
    ports:
      - "8097:8097"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:8097,PLAINTEXT://kafka1:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    networks:
      project:
    ports:
      - "8098:8098"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:8098,PLAINTEXT://kafka2:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka3
    networks:
      project:
    ports:
      - "8099:8099"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:8099,PLAINTEXT://kafka3:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    networks:
      project:
    ports:
      - "8081:8081"
    depends_on:
      - zookeeper
      - kafka1
      - kafka2
      - kafka3
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka1:9092, kafka2:9092, kafka3:9092
      SCHEMA_REGISTRY_DEBUG: 'true'

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    networks:
      project:
    depends_on:
      - kafka1
    ports:
      - 8090:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092, kafka2:9092, kafka3:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  authentication-service:
    container_name: authentication-service
    build:
      context: ./authentication-service
      dockerfile: DockerFile
    networks:
      project:
    depends_on:
      - keycloak
    ports:
      - "9090:9090"
    environment:
      - spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:8080/realms/HCL_Project
      - spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/HCL_Project
      - keycloak.server-url=http://keycloak:8080

  order-service:
    container_name: order-service
    build:
      context: ./order-service
      dockerfile: DockerFile
    ports:
      - "9091:9091"
    networks:
      project:
    depends_on:
      - keycloak
    environment:
      - spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:8080/realms/HCL_Project
      - spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/HCL_Project
      - kafka.bootstrap-servers=kafka1:9092,kafka2:9092,kafka3:9092
      - schema.registry.url=http://schema-registry:8081

  stock-service:
    container_name: stock-service
    build:
      context: ./stock-service
      dockerfile: DockerFile
    ports:
      - "9092:9092"
    networks:
      project:
    depends_on:
      - keycloak
      - stock-db
    environment:
      - spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:8080/realms/HCL_Project
      - spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/HCL_Project
      - kafka.bootstrap-servers=kafka1:9092,kafka2:9092,kafka3:9092
      - spring.datasource.url=jdbc:postgresql://stock-db:5432/Stock
      - schema.registry.url=http://schema-registry:8081

  card-validation-service:
    container_name: card-validation-service
    build:
      context: ./card-validation-service
      dockerfile: DockerFile
    ports:
      - "9093:9093"
    networks:
      project:
    depends_on:
      - keycloak
      - stock-db
    environment:
      - spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:8080/realms/HCL_Project
      - spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/HCL_Project
      - kafka.bootstrap-servers=kafka1:9092,kafka2:9092,kafka3:9092
      - schema.registry.url=http://schema-registry:8081

  feedback-service:
    container_name: feedback-service
    build:
      context: ./feedback-service
      dockerfile: DockerFile
    ports:
      - "9094:9094"
    networks:
      project:
    depends_on:
      - keycloak
      - feedback-db
    environment:
      - spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:8080/realms/HCL_Project
      - spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/HCL_Project
      - kafka.bootstrap-servers=kafka1:9092,kafka2:9092,kafka3:9092
      - spring.datasource.url=jdbc:postgresql://feedback-db:5432/Feedback
      - schema.registry.url=http://schema-registry:8081

  stock-db:
    image: postgres
    container_name: stock-db
    networks:
      project:
    ports:
      - "5431:5432"
    volumes:
      - stock-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456789
      - POSTGRES_DB=Stock

  feedback-db:
    image: postgres
    container_name: feedback-db
    networks:
      project:
    ports:
      - "5430:5432"
    volumes:
      - feedback-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456789
      - POSTGRES_DB=Feedback

networks:
  project:

volumes:
  stock-db-data:
  feedback-db-data: