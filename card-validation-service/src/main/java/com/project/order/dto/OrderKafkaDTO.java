/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.project.order.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrderKafkaDTO extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -761195083774414457L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderKafkaDTO\",\"namespace\":\"com.project.order.dto\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"cardNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"cardExpirationDate\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"cardCVV\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"productIds\",\"type\":{\"type\":\"array\",\"items\":\"long\"}},{\"name\":\"productQuantities\",\"type\":{\"type\":\"array\",\"items\":\"int\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<OrderKafkaDTO> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderKafkaDTO> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderKafkaDTO> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderKafkaDTO> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderKafkaDTO> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderKafkaDTO to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderKafkaDTO from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderKafkaDTO instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderKafkaDTO fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private java.lang.String cardNumber;
  private java.time.LocalDate cardExpirationDate;
  private java.lang.String cardCVV;
  private java.util.List<java.lang.Long> productIds;
  private java.util.List<java.lang.Integer> productQuantities;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderKafkaDTO() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param cardNumber The new value for cardNumber
   * @param cardExpirationDate The new value for cardExpirationDate
   * @param cardCVV The new value for cardCVV
   * @param productIds The new value for productIds
   * @param productQuantities The new value for productQuantities
   */
  public OrderKafkaDTO(java.lang.String id, java.lang.String cardNumber, java.time.LocalDate cardExpirationDate, java.lang.String cardCVV, java.util.List<java.lang.Long> productIds, java.util.List<java.lang.Integer> productQuantities) {
    this.id = id;
    this.cardNumber = cardNumber;
    this.cardExpirationDate = cardExpirationDate;
    this.cardCVV = cardCVV;
    this.productIds = productIds;
    this.productQuantities = productQuantities;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return cardNumber;
    case 2: return cardExpirationDate;
    case 3: return cardCVV;
    case 4: return productIds;
    case 5: return productQuantities;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: cardNumber = value$ != null ? value$.toString() : null; break;
    case 2: cardExpirationDate = (java.time.LocalDate)value$; break;
    case 3: cardCVV = value$ != null ? value$.toString() : null; break;
    case 4: productIds = (java.util.List<java.lang.Long>)value$; break;
    case 5: productQuantities = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'cardNumber' field.
   * @return The value of the 'cardNumber' field.
   */
  public java.lang.String getCardNumber() {
    return cardNumber;
  }


  /**
   * Sets the value of the 'cardNumber' field.
   * @param value the value to set.
   */
  public void setCardNumber(java.lang.String value) {
    this.cardNumber = value;
  }

  /**
   * Gets the value of the 'cardExpirationDate' field.
   * @return The value of the 'cardExpirationDate' field.
   */
  public java.time.LocalDate getCardExpirationDate() {
    return cardExpirationDate;
  }


  /**
   * Sets the value of the 'cardExpirationDate' field.
   * @param value the value to set.
   */
  public void setCardExpirationDate(java.time.LocalDate value) {
    this.cardExpirationDate = value;
  }

  /**
   * Gets the value of the 'cardCVV' field.
   * @return The value of the 'cardCVV' field.
   */
  public java.lang.String getCardCVV() {
    return cardCVV;
  }


  /**
   * Sets the value of the 'cardCVV' field.
   * @param value the value to set.
   */
  public void setCardCVV(java.lang.String value) {
    this.cardCVV = value;
  }

  /**
   * Gets the value of the 'productIds' field.
   * @return The value of the 'productIds' field.
   */
  public java.util.List<java.lang.Long> getProductIds() {
    return productIds;
  }


  /**
   * Sets the value of the 'productIds' field.
   * @param value the value to set.
   */
  public void setProductIds(java.util.List<java.lang.Long> value) {
    this.productIds = value;
  }

  /**
   * Gets the value of the 'productQuantities' field.
   * @return The value of the 'productQuantities' field.
   */
  public java.util.List<java.lang.Integer> getProductQuantities() {
    return productQuantities;
  }


  /**
   * Sets the value of the 'productQuantities' field.
   * @param value the value to set.
   */
  public void setProductQuantities(java.util.List<java.lang.Integer> value) {
    this.productQuantities = value;
  }

  /**
   * Creates a new OrderKafkaDTO RecordBuilder.
   * @return A new OrderKafkaDTO RecordBuilder
   */
  public static com.project.order.dto.OrderKafkaDTO.Builder newBuilder() {
    return new com.project.order.dto.OrderKafkaDTO.Builder();
  }

  /**
   * Creates a new OrderKafkaDTO RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderKafkaDTO RecordBuilder
   */
  public static com.project.order.dto.OrderKafkaDTO.Builder newBuilder(com.project.order.dto.OrderKafkaDTO.Builder other) {
    if (other == null) {
      return new com.project.order.dto.OrderKafkaDTO.Builder();
    } else {
      return new com.project.order.dto.OrderKafkaDTO.Builder(other);
    }
  }

  /**
   * Creates a new OrderKafkaDTO RecordBuilder by copying an existing OrderKafkaDTO instance.
   * @param other The existing instance to copy.
   * @return A new OrderKafkaDTO RecordBuilder
   */
  public static com.project.order.dto.OrderKafkaDTO.Builder newBuilder(com.project.order.dto.OrderKafkaDTO other) {
    if (other == null) {
      return new com.project.order.dto.OrderKafkaDTO.Builder();
    } else {
      return new com.project.order.dto.OrderKafkaDTO.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderKafkaDTO instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderKafkaDTO>
    implements org.apache.avro.data.RecordBuilder<OrderKafkaDTO> {

    private java.lang.String id;
    private java.lang.String cardNumber;
    private java.time.LocalDate cardExpirationDate;
    private java.lang.String cardCVV;
    private java.util.List<java.lang.Long> productIds;
    private java.util.List<java.lang.Integer> productQuantities;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.project.order.dto.OrderKafkaDTO.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.cardNumber)) {
        this.cardNumber = data().deepCopy(fields()[1].schema(), other.cardNumber);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.cardExpirationDate)) {
        this.cardExpirationDate = data().deepCopy(fields()[2].schema(), other.cardExpirationDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.cardCVV)) {
        this.cardCVV = data().deepCopy(fields()[3].schema(), other.cardCVV);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.productIds)) {
        this.productIds = data().deepCopy(fields()[4].schema(), other.productIds);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.productQuantities)) {
        this.productQuantities = data().deepCopy(fields()[5].schema(), other.productQuantities);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderKafkaDTO instance
     * @param other The existing instance to copy.
     */
    private Builder(com.project.order.dto.OrderKafkaDTO other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cardNumber)) {
        this.cardNumber = data().deepCopy(fields()[1].schema(), other.cardNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cardExpirationDate)) {
        this.cardExpirationDate = data().deepCopy(fields()[2].schema(), other.cardExpirationDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cardCVV)) {
        this.cardCVV = data().deepCopy(fields()[3].schema(), other.cardCVV);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.productIds)) {
        this.productIds = data().deepCopy(fields()[4].schema(), other.productIds);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.productQuantities)) {
        this.productQuantities = data().deepCopy(fields()[5].schema(), other.productQuantities);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.project.order.dto.OrderKafkaDTO.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.project.order.dto.OrderKafkaDTO.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cardNumber' field.
      * @return The value.
      */
    public java.lang.String getCardNumber() {
      return cardNumber;
    }


    /**
      * Sets the value of the 'cardNumber' field.
      * @param value The value of 'cardNumber'.
      * @return This builder.
      */
    public com.project.order.dto.OrderKafkaDTO.Builder setCardNumber(java.lang.String value) {
      validate(fields()[1], value);
      this.cardNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cardNumber' field has been set.
      * @return True if the 'cardNumber' field has been set, false otherwise.
      */
    public boolean hasCardNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cardNumber' field.
      * @return This builder.
      */
    public com.project.order.dto.OrderKafkaDTO.Builder clearCardNumber() {
      cardNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'cardExpirationDate' field.
      * @return The value.
      */
    public java.time.LocalDate getCardExpirationDate() {
      return cardExpirationDate;
    }


    /**
      * Sets the value of the 'cardExpirationDate' field.
      * @param value The value of 'cardExpirationDate'.
      * @return This builder.
      */
    public com.project.order.dto.OrderKafkaDTO.Builder setCardExpirationDate(java.time.LocalDate value) {
      validate(fields()[2], value);
      this.cardExpirationDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'cardExpirationDate' field has been set.
      * @return True if the 'cardExpirationDate' field has been set, false otherwise.
      */
    public boolean hasCardExpirationDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'cardExpirationDate' field.
      * @return This builder.
      */
    public com.project.order.dto.OrderKafkaDTO.Builder clearCardExpirationDate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'cardCVV' field.
      * @return The value.
      */
    public java.lang.String getCardCVV() {
      return cardCVV;
    }


    /**
      * Sets the value of the 'cardCVV' field.
      * @param value The value of 'cardCVV'.
      * @return This builder.
      */
    public com.project.order.dto.OrderKafkaDTO.Builder setCardCVV(java.lang.String value) {
      validate(fields()[3], value);
      this.cardCVV = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'cardCVV' field has been set.
      * @return True if the 'cardCVV' field has been set, false otherwise.
      */
    public boolean hasCardCVV() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'cardCVV' field.
      * @return This builder.
      */
    public com.project.order.dto.OrderKafkaDTO.Builder clearCardCVV() {
      cardCVV = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'productIds' field.
      * @return The value.
      */
    public java.util.List<java.lang.Long> getProductIds() {
      return productIds;
    }


    /**
      * Sets the value of the 'productIds' field.
      * @param value The value of 'productIds'.
      * @return This builder.
      */
    public com.project.order.dto.OrderKafkaDTO.Builder setProductIds(java.util.List<java.lang.Long> value) {
      validate(fields()[4], value);
      this.productIds = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'productIds' field has been set.
      * @return True if the 'productIds' field has been set, false otherwise.
      */
    public boolean hasProductIds() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'productIds' field.
      * @return This builder.
      */
    public com.project.order.dto.OrderKafkaDTO.Builder clearProductIds() {
      productIds = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'productQuantities' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getProductQuantities() {
      return productQuantities;
    }


    /**
      * Sets the value of the 'productQuantities' field.
      * @param value The value of 'productQuantities'.
      * @return This builder.
      */
    public com.project.order.dto.OrderKafkaDTO.Builder setProductQuantities(java.util.List<java.lang.Integer> value) {
      validate(fields()[5], value);
      this.productQuantities = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'productQuantities' field has been set.
      * @return True if the 'productQuantities' field has been set, false otherwise.
      */
    public boolean hasProductQuantities() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'productQuantities' field.
      * @return This builder.
      */
    public com.project.order.dto.OrderKafkaDTO.Builder clearProductQuantities() {
      productQuantities = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderKafkaDTO build() {
      try {
        OrderKafkaDTO record = new OrderKafkaDTO();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.cardNumber = fieldSetFlags()[1] ? this.cardNumber : (java.lang.String) defaultValue(fields()[1]);
        record.cardExpirationDate = fieldSetFlags()[2] ? this.cardExpirationDate : (java.time.LocalDate) defaultValue(fields()[2]);
        record.cardCVV = fieldSetFlags()[3] ? this.cardCVV : (java.lang.String) defaultValue(fields()[3]);
        record.productIds = fieldSetFlags()[4] ? this.productIds : (java.util.List<java.lang.Long>) defaultValue(fields()[4]);
        record.productQuantities = fieldSetFlags()[5] ? this.productQuantities : (java.util.List<java.lang.Integer>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderKafkaDTO>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderKafkaDTO>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderKafkaDTO>
    READER$ = (org.apache.avro.io.DatumReader<OrderKafkaDTO>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










